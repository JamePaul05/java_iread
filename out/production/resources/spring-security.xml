<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-4.0.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.ifuture.iread.security" />

    <!--对指定的请求不做认证-->
    <http pattern="/login" security="none" />
    <http pattern="/resources/**" security="none" />
    <http pattern="/wechat/**" security="none" />
    <http pattern="/MP_verify_t2uIW3ZMnQCFcixD.txt" security="none" />

    <!--添加了一些默认的filter-->
    <http auto-config="true" use-expressions="true">

        <!--csrf跨站请求伪造,spring security防止跨站提交攻击提供了CSRF保护功能，在springsecurity4默认启用
            POST方法被排除在外了，也就是说只有GET|HEAD|TRACE|OPTIONS这4类方法会被放行，其它Method的http请求，
            都要验证_csrf的token是否正确，而通常post方式调用rest服务时，又没有_csrf的token，所以校验失败
        -->
        <csrf disabled="true" />

        <!--所有的请求都要验证是否是已认证的用户-->
        <!--<intercept-url pattern="/admin/**" access="isAuthenticated()" />-->

        <!--403是一个请求，将转到springmvc处理-->
        <access-denied-handler error-page="/admin/403" />

        <form-login login-page="/admin/login" password-parameter="password"
                    username-parameter="username" login-processing-url="/admin/j_spring_security_check"
                    authentication-failure-url="/admin/login?error" default-target-url="/admin/index/list"
                    always-use-default-target="true" />
        <logout logout-url="/admin/j_spring_security_logout" logout-success-url="/admin/login?logout" />

        <!-- 检测失效的sessionId,超时时定位到另外一个URL, -->
        <!--<session-management
            session-authentication-error-url="/login"
            invalid-session-url="/login" session-fixation-protection="migrateSession">-->
        <session-management invalid-session-url="/admin/login?invalid">
            <!-- 防止多端登录-->
            <concurrency-control max-sessions="1"
                                 error-if-maximum-exceeded="false" expired-url="/admin/error" />
        </session-management >

        <!-- Spring Sercurity要从数据库中获取用户、权限、资源来实现权限管理，需要自定义过滤器， 并且该过滤器必须在spring
            Security执行FILTER_SECURITY_INTERCEPTOR过滤器之前执行， 因为该框架实现权限管理实质就是在执行action之前先执行它框架中的为权限管理制定的一系列Fliter。
            我们自定的这个SercurityFilter类要继承AbstractSecurityInterceptor 接口和Filter类（负责传递一系列的Filter）,
            因为我们是从数据库中获取权限验证的数据，所以还要重写FilterInvocationSecurityMetadataSource 接口， AccessDecisionManager
            接口，UserDetailsService 接口，只要重写了这3个接口， 然后再spring配置文件中做相应的配置，项目启动启动后，我们进行资源请求，就自动会去执行我们重定义的类进行权限判断。 -->
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />

    </http>

    <authentication-manager alias="myAuthenticationManager">
        <authentication-provider user-service-ref="myUserDetailService">
            <password-encoder hash="md5">
                <!--<salt-source user-property="username" />-->
            </password-encoder>
        </authentication-provider>
    </authentication-manager>


</beans:beans>